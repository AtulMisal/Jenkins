                                                            Jenkins                                                            18-12-2023

Jenkins best videos :
https://www.youtube.com/watch?v=WqFyN8LvRNI&list=PLvBBnHmZuNQJeznYL2F-MpZYBUeLIXYEe

https://github.com/mjah/kubernetes-jenkins-cicd-pipeline-example/tree/master

Jenkins New Starting                                                                                                            

Day-1 :

Module 1: Introduction to Jenkins
     1.1 Overview of Jenkins and Continuous Integration
     1.2 Importance of Jenkins in DevOps
     1.3 Installing and Configuring Jenkins
     1.4 Jenkins Dashboard and Navigation
     1.5 Jenkins Architecture 
	 
Module 2: Jenkins Jobs and Builds
     2.1 Creating Your First Jenkins Job
     2.2 Building Freestyle Projects
     2.3 Parameterized Builds
     2.4 Working with Build Triggers
 
Module 3: Source Code Management Integration
     3.1 Integrating Jenkins with Git
     3.2 Working with Jenkins and SVN
     3.3 Jenkins Slave Architecture 
	 
Daye-2 :

Module 4: Jenkins Pipeline as Code
     4.1 Introduction to Jenkins Pipeline
     4.2 Declarative vs. Scripted Pipelines
     4.3 Writing Your First Jenkinsfile
     4.4 Managing Multibranch Pipelines
 
 
Module 5: Jenkins and Containers
     5.1 Integrating Jenkins with Docker
	 5.2 Running Jenkins in Docker Containers
	 5.3 Building and Deploying Containers with Jenkins
	 5.4 Kubernetes Integration with Jenkins
 
Day-3 :
 
Module 6: Jenkins Security and Best Practices
	 6.1 User Authentication and Authorization
	 6.2 Securing Jenkins with SSL/TLS
	 6.3 Security Best Practices in Jenkins
	 6.4 Backup and Restore Strategies
 
Module 7: Jenkins Plugins and Integrations
	 7.1 Exploring Essential Jenkins Plugins
	 7.2 Integrating Jenkins with Cloud Platforms (AWS, Azure, GCP)
	 7.3 Jenkins and Monitoring Tools Integration
	 7.4 Notifications and Reporting in Jenkins

Day-4 :
 
Module 8: Jenkins Best Practices for DevOps
	 8.1 CI/CD Best Practices with Jenkins
	 8.2 Infrastructure as Code (IaC) and Jenkins
	 8.3 Collaborating with Development Teams
	 8.4 Troubleshooting and Debugging Jenkins Issues
 





Module 1: Introduction to Jenkins
     1.1 Overview of Jenkins and Continuous Integration :
	     Jenkins is used for the automation purpose. It is an open source tool written in Java language with plugins. 
		 It is used for continuous integration.
		 
		 Examples :
		     1. The Jenkins server checks the source code repository at regular intervals of time
			 2. When the developer commits the code to the source code repository, the Jenkins server
			    detects the changes that have occurred in the source code repository
			 3. Jenkins will detect and pull the changes and will start preparing a new build
			 4. If the build gets failed, the developer will be communicated about the failure of the build
			    so that they can check the code at their end
			 5. If the build is successful, Jenkins will deploy the build in test server
			 6. After smoke testing, the development team is communicated about the successful
			    deployment of the code to the test server
			 7. Jenkins will continue to check the source code repository for any changes make in the
			    source code and keeps on repeating the entire process

        Benefits of using Jenkins
			Jenkins is used for the continuous integration of the software. Below are some of the benefits of using Jenkins:
				1. It is open source and easy to install. Can be plugged in with more than 1000 plugins
				2. Helps to achieve continuous integration for Agile projects
				3. It helps to implement the test driver development
				4. It can be integrated with LDAP mail server to provide automatic build report notification
				5. It helps to detect the defects early in the development cycle
				6. It is free of cost & Easy to configure.
				7. Portable for all major platforms, since it is written in Java
				8. If a defect is detected, the respective developer can quickly fix the defect.
				
		Relation between Hudson and Jenkins
            Hudson was the earlier name and version of current Jenkins. After some issue the project name is
            changed to Jenkins.		
	 
	 
	 
     1.2 Importance of Jenkins in DevOps :
	        Jenkins is an CI/CD tool that is used by DevOps teams to create software projects by developing & testing 
			continuously.
			
     1.3 Installing and Configuring Jenkins :
	        1. On Windows :
			      For this download Jenkins Package from Jenkins official website & set all env variables.
				  Then on browser type localhost:8080. Use given username & password to login.
				  
				  
			2. On Linux or other platforms :
                 1. apt-get update & apt-get install openjdk-11-jdk 
				 2. wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
				 3. sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
				 4. apt-get update
				 5. apt-get install jenkins -y 
				 6. service jenkins start
				 7. service jenkins status
			
     1.4 Jenkins Dashboard and Navigation :
	        Go through all parts/modules that are on Jenkins.
			
	 1.5 Jenkins Architecture :
           Jenkins has a Master-Node architecture concept for work load distribution.

           Jenkins Master
               Jenkins master is used for
                   Building Job scheduling
                   Dispatching a build for actual execution
                   Monitoring child nodes
                   Configuring the build results


           Jenkins Child Node
               Jenkins child node is a java executable that runs on the child machines

                   gets the requests from Master
                   can work on many OS
                   is to execute a job which is being allocated
                  decides on which child node machine a job should get executed	 
			
			
			
Module 2: Jenkins Jobs and Builds
     2.1 Creating Your First Jenkins Job :
	       As you navigate to Jenkins Front page we will see some Items on left side so go through all of them.
		    
     2.2 Building Freestyle Projects :
	      Create some sample jobs with given option.
		  
     2.3 Parameterized Builds :
	      Use some parameters to create the builds.
		  
     2.4 Working with Build Triggers :
          Use some Triggers.	 
		  
		  
		  

Module 3: Source Code Management Integration :
     3.1 Integrating Jenkins with Git :
	      1. Install the Jenkins Git plugin
		  2. Install the Jenkins GitHub integration plugin
		  3. Use GitHub URLs to pull source code into Jenkins
		  4. Use GitHub webhooks to trigger Jenkins build jobs
		  5. Configure the Jenkins with GitHub integration plugin to enable additional reporting features
	 
	 
     3.2 Working with Jenkins and SVN :
	       https://www.youtube.com/watch?v=JUB6iUmsrOM
	 
     
	 3.3 Jenkins Slave Architecture :
	       Jenkins usese slaves to distribute the work. So that we can seamlessly perform our tasks.\
		   
		To add any slave use below steps :
           1. Manage Jenkins  ->  Manage Nodes & Clouds  ->  New Node 
           2. Need to install java on slave also the path added in remote root directory step needs to be 
              available on slave if not create that directory.
           3. Change the ownership of this folder as 
                 chown username:groupname foldername
              Example : chown gaurav:gaurav jenkins 				 
	 	 
Daye-2 :

Module 4: Jenkins Pipeline as Code
	 
     4.1 Introduction to Jenkins Pipeline :
	        Why we need Jenkins Pipeline as a Code ?
	            As we know if we have to create an project using build pipeline way we need to create the diff jobs. In actual 
				organization we have many jobs which are in line and the no is more so to do this we need to use pipeline as a code.
	 
     4.2 Declarative vs. Scripted Pipelines :
	        A Jenkinsfile can be written using two types of syntax â€” Declarative and Scripted.
			  1. Scripted Pipeline :
			        It uses some node & script concepts.
					
			  2. Declarative Pipeline :
                    Simple way to write jenkinsfile. 			  
	 
     4.3 Writing Your First Jenkinsfile :
	 
	        pipeline {
			  agent any 
			  
			  stages {
			    stage ('Build') {
				  steps {
				  echo "This is build stage"
				}
			    }
				stage ('Test') {
                  steps {				 
				    echo "This is test stage"
				}
			  }
			  }
			}
	 
     4.4 Managing Multibranch Pipelines :
	         A multi-branch pipeline is a concept of automatically creating Jenkins pipelines based on Git branches. 
			 It can automatically discover new branches in the source control (Github) and automatically create a pipeline 
			 for that branch. When the pipeline build starts, Jenkins uses the Jenkinsfile in that branch for build stages.


            pipeline {
			  agent {
			    label 'Node'
			  }
			  environment {
			    name = 'Ashish Misal'
			  }
			  tools {
			    maven 'Maven'
			  }
			  stages {
			    stage ('Build') {
				  steps {
				    sh 'echo "Hi ${name}"'
				  }
				}
			  stage ('Test') {
			    environment {
				   env_name = 'Test'
				}
				steps {
				  sh 'echo "Hi ${env_name}"'
				}
			  }
              stage ('Multibranch Pipeline') {
			    when {
				  branch 'branch_name'             # Add the branch name from github where code is present.
				}
				steps {
				  sh 'echo "Hi Atul"'
				}
			  }			  			  
			  }			  
			}			 
	 
	 
 
Module 6: Jenkins and Containers

     6.1 Integrating Jenkins with Docker
	        Follow the below pipeline in which we have made a build of given source code & created an docker image.
            Pushed that docker image to docker hub for this we have to provide docker hub credentials to jenkins.
            In manage jenkins -> credentials -> add new credentials -> copy the id. **
			Need to install docker on that server.
			In that github repo we need to store the Dockerfile so that with that we can build an image.
			
			pipeline {
			  agent {
			    label 'Docker'
			  }
			  environment {
			    User_Name = 'Atul Misal'
			  }
			  stages {
			    stage ('Clone Code') {
				  steps {
				    echo "Cloning the code"
				    git url: "https://github.com/LondheShubham153/django-notes-app.git", branch: "main"
				  }
				}
				stage ('Build docker image') {
				   # Don't add this stage ('Build docker image') in pipeline. Do this all on server.
				   # As we know when we installed jenkins an jenkins user is created, but jenkins user don't have access
                   # to docker group to do that we have to perform some commands on server as 
                   # sudo usermod -aG docker jenkins 
                   # sudo reboot    -- so that the changes may done.	
                   # Check by doing below steps the jenkins pipeline is successful or not if not perform all steps on serevr
				   
				   steps {
				     sh 'sudo usermod -aG docker jenkins'
					 sh 'sudo reboot'
					 sh 'sleep 20'
					 sh 'docker build -t image_name .'
				   }
				}
				stage ('Pushing image to docker hub') {
				  # For this we need to add credentials. Check above desc.
				  steps {
				     echo "Pushing the image to docker hub"
					 withCredentials([usernamePassword(credentialsId: 'Check_**', passwordVariable: 'dockerHubPass', usernameVariable: 'dockerHubUser')]) {
					 sh 'docker tag image_name ${env.dockerHubUser}/image_name'
					 sh 'docker login -u ${env.dockerHubUser} -p ${env.dockerHubPass}'
					 sh 'docker push ${env.dockerHubUser}/image_name'
					 
					  # OR
					  
					 # If you ran this pipeline again it will fail & the error is port already mapped means the given port is 
					 # already in use & to avoid this we are using docker compose.
					 # Install docker compose on server.
					 # 'sudo apt-get install docker-compose -y'           # Do this on Server.
					 sh 'docker-compose down && docker-compose up -d'
					
					 }
				}
				}
			  }
			}
			
	 
	 
	 6.2 Running Jenkins in Docker Containers :
	 
	 
	 6.3 Building and Deploying Containers with Jenkins
	 
	 
	 6.4 Kubernetes Integration with Jenkins	 
	 
	 
	 6.5 Jenkins Shared Libraries 
	 
	 
	 
	 
	 
Day-3 :
 
Module 7: Jenkins Security and Best Practices
	 7.1 User Authentication and Authorization
	 
	 
	 7.2 Securing Jenkins with SSL/TLS
	 
	 
	 7.3 Security Best Practices in Jenkins
	 
	 
	 7.4 Backup and Restore Strategies
	 
	 
 
Module 8: Jenkins Plugins and Integrations
	 8.1 Exploring Essential Jenkins Plugins
	 
	 
	 8.2 Integrating Jenkins with Cloud Platforms (AWS, Azure, GCP)
	 
	 
	 8.3 Jenkins and Monitoring Tools Integration
	 
	 
	 8.4 Notifications and Reporting in Jenkins	 
	 
	 
	 	 
----------------------------------------------------------------------------------------------------------------------------------------------------

Gaurav Sharma :

1. Installation 
2. Dashboard Overview
      Top Black Strip --> Header
      Left Side Panel till New View --> Configuration Panel
3. Manage Jenkins
      1. Configure system --> Once you installed any plugin it's configuration can be done here.
      2. Gloabl tool configuration --> Here you can define the path any the respective plugin.
      3. Manage Plugin --> Add/Remove any plugin.
      4. Manage Nodes & Clouds --> Add nodes 
      5. Configure Gloabl Security --> Security related any task/work.
      6. Manage Credentials --> Credentials can be stored here.
      7. Manage Users --> Add/Delete Users.
4. plugins.jenkins.io --> For jenkins plugins.
5. Role based Auth. Strategy --> Install this plugin & go to system configuration select this and save.
                                 Now go to manage users add a role. Then assign a role - add user - assign to the role.
6. Git Plugin
7. 								 
	  
-----------------------------------------------------------------------------------------------------------------------------

Multiple Plugins :
 For this check javapoint website :
    
	1. Jenkins With GitHub 
	    1. Public Repo :
	       pipeline {
              agent { docker { image 'cameronmcnz/ant-jdk8-git:latest' } }
              stages {
                 stage('GitHub Jenkins Ant Docker Build') {
                    steps {
                       git url: 'https://github.com/learn-devops-fast/rps-ant.git', branch: 'main'
                       sh 'ant clean compile test package war'
                    }
                 }
              }
            }
	    
		2. Private Repo :
           # First create an GitHub token from developer setion.
           # Add this token in jenkins credentials as :
           # Manage Jenkins - Credentials - System - Gloabl Credentials - Add Credentials - Select Secret text - Copy ID

           pipeline {
		      agent any
			  environment {
			     GitHub_Cred = credentials("github")
			  }
			  stages {
			     stage ('Cloning Private Github Repo') {
				    steps {
					   git url: 'https://github.com/AtulMisal/node-todo-cicd.git', credentialsId: GitHub_Cred, branch: "master"
					}
				 }
			  }
		   }	   

		  
    2. Jenkins With Docker :
	      pipeline {
		    agent {
			  docker {image 'ubuntu:20.04'}
			}
			environment {
			  image_name = 'My-Note_App'
			}
			stages {
			   stage ('cloning the public repo') {
			     steps {
				   git url: "https://github.com/LondheShubham153/django-notes-app.git", branch: "main"
				   sh 'echo "!!! Repo cloned successfully !!!"'
				 }
			   }
			   # Do below stage on server not in pipeline. Delete this stage in pipeline.
			   stage ('Installing Docker') {
			     steps {
				   sh 'sudo apt-get install docker.io -y'
				   sh 'sleep 10'
				   sh 'usermod -aG docker jenkins'
				   sh 'usermod -aG docker ubuntu'
				   sh 'service docker restart'
				 }
			   }
			   stage ('Build the docker image') {
			     steps {
				   sh 'docker build -t image_name .'
				 }
			   }
			   stage ('Login to docker Hub') {
			     steps {
				   withCredentials([withCredentials(credentialsId: 'docker_hub', usernameVariable: 'docker_Id', passwordVariable: 'docker_Pass')]){
				   sh 'docker tag image_name ${env.docker_Id}/image_name'
				   sh 'docker login -u ${env.usernameVariable} -p ${env.passwordVariable}'
				   sh 'docker push ${env.docker_Id}/image_name'
				   }
				 }
			   }
			  stage (''Deploy to Prod) {
			    steps {
				  # 'apt-get install docker-compose -y'      # Do on server.
				  sh 'docker-compose down && docker-compose up -d'
				}
			  } 
			}
		  }
	
	
    3. Jenkins With K8s :
	       https://github.com/mjah/kubernetes-jenkins-cicd-pipeline-example/tree/master
	
    4. Jenkins With SonarQube :
	       1. First create an SonarQube server. Create an sonar token as User > My Account > Security > Generate Tokens
		   2. Configurate SonarQube webhook for quality gate
              Administration > Configuration > Webhooks > Create
              The URL should point to your Jenkins server http://{JENKINS_HOST}/sonarqube-webhook/
		   3. Setup SonarQube server at Jenkins
              Manage Jenkins > Configure System > SonarQube servers
              Enter you SonarQube server host and the token generated at previous step.
           4. Setup SonarQube scanner at Jenkins
              Manage Jenkins > Global Tool Configuration > SonarQube Scanner
              Remember to give it a name, letâ€™s take SonarQubeScanner as example here.
           5. Setup SonarQube scan stage in declarative pipeline Jenkinsfile
		      (https://medium.com/@rosaniline/setup-sonarqube-with-jenkins-declarative-pipeline-75bccdc9075f)
			  
                stage('Sonarqube') {
                  environment {
                     scannerHome = tool 'SonarQubeScanner'
                  }
                  steps {
                    withSonarQubeEnv('sonarqube') {
                       sh "${scannerHome}/bin/sonar-scanner"
                    }
                    timeout(time: 10, unit: 'MINUTES') {
                      waitForQualityGate abortPipeline: true
                    }
                 }
               }
-----------------------------------------------------------------------------------------------------------
                stage ('Scan and Build Jar File') {
                  steps {
                    withSonarQubeEnv(installationName: 'Production SonarQubeScanner', credentialsId: 'SonarQubeToken') {
                    sh 'mvn clean package sonar:sonar'
                }
                }
              }			   
-------------------------------------------------------------------------------------------------------------	
	
    5. Jenkins With Ansible
	6. Jenkins With Maven
	7. 
    

All Plugins that are used :

   1. Build Authorization Token Role - By this we can run a job useing a url (Inside Build trigger we have an option 
                                       'Trigger build remotely.')	
   2. Theam - By this we can change the dashboard theam (Install plugin then in configure system add url from 
            'Jenkins Plugins page')
   3. Build Pipeline - By this we will see the pipeline view of our job.   
   4. Maven - By this we will work on Maven projects 
   5. Deploy to container		
   6. Copy artifact - By this we can copy an artifact from one project to other.		
   7. Blue Ocean - By this we will create a pipeline by clicking only.	
   8. Slack Notification - Will get notification for our projects 
   9. Warning Next Generation - Will give you Warning masg.   
   10.Github
   11.EC2   
   12.Green balls   
   13.Ansible   
   14.Nexus   
   15.Sonar   
   16.pipeline     
   17.Safe Restart -- By this we will get an option for safe restart in manage jenkins at bottom     
   18.Parameterized Trigger -- By this will get an option in post build action as Trigger Parameterized.....
   19.Rebuilder jenkins plugin -- By this when we run a job with parameters if we want to run it again with previously given 
                                  values it will show same values.(Will get an option as Rebuild)  
   20.Performance plugin - JMeter	
	 
	 
	 
	 
	 
	 
------------------------------------------------------------------------------------------------------------------------------	 
Pipeline Sample :

pipeline {
  agent {
    label 'Node'
  }
  environment {
    name = "Global Environment Variable"
  }
  tools {
    maven "Maven"    # The name given in global tool configuration
	ant "Anti"       # The name given in global tool configuration      
  }
  stages {
    environment {
	   name = "Stage level env variable"
	}
	stage ('Cloning code from github repo') {
	  agent {
	    label 'Master'                 # We can add slaves in stage lavels.
	  }
	  steps {
	     echo "Cloning the code from github repository"
		 git url: "Github Repo URL", branch: "main"
	  }
	  steps {
	     echo "!!! Code cloned successfully !!!"
	  }
	}  
	stage ('Creating docker image') {
	  # For this we need Dockerfile which will be there in GitHub repo.
	  steps {
	    sh 'sudo docker build -t ${image_name} .'
	  } 
	}
	stage ('Adding tag to docker image') {
	  steps {
	    # Adding tag to docker image so that it can be easily pushed to docker hub.
	    sh 'docker tag ${image_name} docker_hub_username/${image_name}'   # In below step usernameVariable is same as docker_hub_username
	  }
	}
	stage ('Login to docker hub') {
	  steps {
	    # To do docker login we need to add credentials. So in credentials section add docker hub credentials.
		# manage jenkins -> credentials -> new credentials
		# copy the credentialsId which will be required in further process.
		withCredentials([credentialsId: 'Copy_Id_Here', usernameVariable: 'Any_Name_Here', passwordVariable: 'Any_Name_Here']) {
		sh 'docker login -u ${usernameVariable} -p ${passwordVariable}'
		sh 'docker push ${usernameVariable}/${image_name}'
		}
	  }
	}
	stage ('Running the Dockerfile using docker-compose') {
	  steps {
	    # We installed docker-compose in above step.
		# If you ran this pipeline again it will fail & the error is port already mapped means the given port is 
		# already in use & to avoid this we are using docker compose.
		# Create an docker compose file in github repo where jenkinsfile & Dockerfile is present.
		# Check below we created that docker-compose file.
		sh 'docker-compose down && docker-compose up -d'
	  }
	}
	}
  }
-----------------------------------------------------------------------------------------------------------------------------------------------
Docker compose file :

version: "3.3"
services:
  web:
     build: .
	 ports:
	   - "8080:8080"
	   
------------------------------------------------------------------------------------------------------------------------------------------------	   
Basic Syntax :	   

pipeline {
	agent any 
			  
	stages {
	   stage ('Build') {
		 steps {
			echo "This is build stage"
		}
		}
	   stage ('Runing and command') {
         steps {				 
			sh 'date'         # This is the way to write mutltiple commands in seperate line
			sh 'pwd'
		}
		}
	   stage ('Running commands in single step') {
	     steps {
		    sh '''
			ls
			pwd 
			date 
			'''
		 }
	   }
	   stage ('Using environment variables') {
	     stpes {
		   sh 'echo "${BUILD_ID}"'
		 }
	   }
		}
	    }
	 
---------------------------------------------------------------
Using variables that are defined by users :

pipeline {
   agent any 
   environment {
     name = 'Atul Misal'
	 age = 27   
   }
   stages {
     stage ('Printing user defined variables') {
	   steps {
	     sh 'echo "${name}"'
		 sh 'echo "${age}"'	   
	   }	 
	 }  
   }
  }
-------------------------------------------------------------------
Using environment variables for specific stage & that can not be used for other stage.

pipeline {
  agent any 
  environment {
    name_1 = 'Global Variables'
  }
  stages {
    stage ('Printing Specific Stage variables & Global variables') {
	  environment {
	    name_2 = 'Stage specific variables'
	  }
	  steps {
	    sh 'echo "${name_1}"'
		sh 'echo "${name_2}"'
	  }	
	}
    stage ('Trying to print variables that are used in above stage') {
	  steps {
	    sh 'echo "${name_2}"'
	  }
	}
  
  }
} 
 
--------------------------------------------------------------------------
To take input from user 

pipeline {
  agent any 
  environment {
    name = 'Atul Misal'
  }
  parameters {
    string (name: 'UserName', defaultValue: 'Ashish', description: 'Printing Users name')
	booleanParams (name: 'isMale', defaultValue: 'true', description: 'Printing Gender')
	choice (name: 'city', choices ['Mumbai','Pune','Delhi'], description: 'Printing City')
  }
  stages {
    stage ('User Input') {
	  steps {
	    sh 'echo "${UserName}"'		
	  }	
	}
  }
} 
   
--------------------------------------------------------------------------------------
Manual intervention inbetween stages 

pipeline {
  agent any 
  
  stages {
    stage ('Manual Intervention') {
	  input {
	    message "Should we continue ?"
		ok "Yes we should.."
	  }
	  steps {
	    echo 'Hi Atul, Thanks for confirming me.'
	  }
	}
  }
}  

----------------------------------------------------------------------------------
Post action are used when we have to run some commands continueously even if some stages are failed.
Then we have to use post actions.

Post actions :
  1. always   2. changed   3. fixed   4. regression   5. aborted    6. failure    7. success   8. unstable    
  9. unsucceessful    10. cleanup  

It can be defined in stage level & Pipeline level.
pipeline {
  agent {
    label 'node'
  } 
  
  stages {
    stage ('Build') {
	  steps {
	    sh 'echo "Hi We have started build stage"'
	  }
	}
	stage ('Test') {
	  steps {
	     sh 'echo "Hi We have started testing stage"'
	  }
	  post {
        always {
	       sh 'echo "You have completed the pipeline"'
	}
	    success {
	       sh 'echo "On Success"'
	}
	   failure {
	      sh 'echo "On Failure"'
	}
	stage ('Prod') {
	  steps {
	      sh12 'echo "Hi We have started prod stage"'
	  }
	}
  }
  
  post {
    always {
	  sh 'echo "You have completed the pipeline"'
	}
	success {
	  sh 'echo "On Success"'
	}
	failure {
	  sh 'echo "On Failure"'
	}
  }
}

------------------------------------------------------------------------------------
To run some steps in parallel position (Jobs At a time)

pipeline {
  agent {
    label 'Node'
  }
  environment {
    name = 'Atul Misal'
  }
  parameters {
    string (name: 'UserName', defaultValue: 'Avdhut Misal', description: 'This is a username')
	booleanParams (name: 'isMale', defaultValue: 'true', description: 'Gender')
	choice (name: 'City', choices['Pune','Mumbai','Nagpur'], description: 'City Name') 
  }
  stages {
    stage ('Build') {
	  input {
	    message "Should we continue ?"
		ok "You should"
	  }
	  steps {
	    sh 'echo "Hi ${UserName}"'
	  }
	}
	stage ('Parallel Stages') {
	  parallel {
	    stage ('First Stage') {
		  steps {
		    sh 'echo "Hi this is First Stage"'
		}
		}
	    stage ('Second Stage'){
		  steps {
		    sh 'echo "Hi this is Second Stage"'
		  }
		}
	}
  }  
}


---------------------------------------------------------------------------------------------------------

To install any tools 

pipeline {
  agent {
    label 'Node'          # Provide the label that you gave during creation on node/slave
  }
  tools {
    maven 'Maven'         # In manage jenkins -> Global Tool Config -> Add maven -> Write the same name here.
  } 
}


## Try to use syntax generator from pipeline section..

--------------------------------------------------------------------------------------------------------

Abhishek Veeramalla Jenkins Day 19 Video :

Github URL : https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero/tree/main/python-jenkins-argocd-k8s


Project Name :
     Install Jenkins, configure Docker as slave, set up cicd, deploy applications to k8s using Argo CD in GitOps way.

pipeline {
  agent {
    docker { image 'image_name'}
  }
  stages {
    stage ('Test') {
	  steps {
	     sh 'node --version'
	  }
	}
  }
}

-------------------------------------------------------------------------------------------------------------------------------

Following are the features of Jenkins:

  1.  Cross-platform: it can be used on Windows, Linux, Mac OS and Solaris environments
  2.  Plug-ins: Jenkins supports more than 1400 plugins to the automation of all kinds of development, 
                testing and deployment  tasks
  3.  Installation: Jenkins is easy to install either using direct installation file (exe) or war file 
                    to deploy using application server
  4.  Easy Configuration: To configure various tasks on Jenkins is easy
  5.  Change Support: Jenkins generates the list of all changes done in repositories like SVN
  6.  Project build: Jenkins documents the details of jar, version of jar and mapping of build and the jar numbers
  7.  Permanent links: Jenkins provides direct links to the latest build or failed build that can be used for easy 
                       communication
  8.  Email integration: Jenkins can be configured to email the content of the status of the build
  9.  TestNG test: Jenkins can be configured to run the automation test build on TestNG after each build of SVN
  10. Distributed Builds: Jenkins allows remote job execution using a concept called "child" node. The system in 
                          which Jenkins is installed is called the master and the other remote systems from which the 
						  test scripts are referred to as child nodes. Basically, the installed Jenkins from the master 
						  system can be utilized in multiple slave systems by accessing it using the master URL through browser.  
	  
To add globale env variables 
    Manage Jenkins -> Configure System -> Gloable Properties 

To Run multiple job's parallaly
    Job Configure -> execute concurrent build if necessory   

In Build stage we are achiving these steps:
   Compile -> Code Review -> Unit Testing -> Integration Testing -> Packaging (Jar/War)


To make Email Notification on first make on 2 step verification ON and create an app pass on same gmail window
and while configuring the email pass use this pass. 

	  	  
Setting up cloud Agent :
    We can use Docker, K8S, AWS agent in Jenkins
	  
As we are configuring docker as a slave in our jenkins setup we installed docker pipeline and coz of this in pipeline
we are mentioning docker {image 'ubuntu'} as agent and the slave which we added must need docker installed.
 
While using docker as a agent we need to create an docker image based on which tools we have to configure and then use that 
image as a slave.
	
As we are using argo cd as a gitops tools which is used to run CD pipeline we need to install it on k8s so open one websit
called operator.io and search argo cd and use the commands to install. 
	  
What is Environment ?
   It is an platform where our application will run.
      1. Dev Env : Developers will use to perform code integration testing.
      2. QA Env :  Testers will use to perform functional testingz.
      3. UAT Env : User Acceptance Testing - Client side team will perform application testing
	  4. Pilot Env : Also called Pre-Prod env (Used to check performance testing) also called Stagging env
	  5. Prod Env : Live env. End users will access the application

--------------------------------------------------------------------------------------------------------------------------------

Jenkins Interview Questions :

1. What is Jenkins ?
       Jenkins is an java based self contained automation tool.
       Helps us to automate build,test and deploy the tasks.  
       Jenkins was originally developed by Sun MicroSystem in 2004 under the name Hudson.
	   Then Oracle brought MicroSystem and then they moved Jenkins seperately from Hudson
	 
2. Why we need Jenkins ?
       With the help of Jenkins we can automate complex & large scale manual build & deployments.

3. What is the Plugin ?
      Plugins are small software componantes that adds additional functionality. 
   
4. Why to install Maven Plugins ?
       To manage maven projects effectively.

5. Where in Jenkins to install maven plugins ?
       From 'manage Jenkins' link from home page
   
6. How to ensure that maven plugins are installed ?
       Maven project option appers in create new items screen.
   
7. What is Cron ?
       Cron is an unix based software utility which helps us to schedule jobs periodically.

8. What is MicroService ?
       Architectural style to create an application as group of small services. 
 
9. What is build visualizer plugins ?
       A fuctionality in jenkins which gives a visual representatio of automated build process.
  
10. Why we need this build visualizer as we have console o/p window ?
       Correct .. but think of a senario where we have chained 100 services for automated build.
       Browsing through 100 console window is not a good practice & good customer experience.
 
11. What is chaining of MicroService ?
       Every MicroService is represented as Jenkins Job.
       Process of connecting such Jenkins Job is called chaining of MicroService.
 
12. What is Continuous Integration ?
       Continuous Integration (CI) is the process of automating the build and testing of code every
       time a team member commits changes to version control
 
13. What is Continuous Delivery ?
       It is the process in Jenkins where manual intervention is required to complete the pipeline.
       To achive this in post build actions -> Build other projects (Manual steps)
 
       Continuous Delivery (CD) is the process to build, test, configure and deploy from a build to a
       production environment
 
14. What is Continuous Deployment ?
       It is the process in Jenkins where manual intervention is not required to complete the pipeline means it is 
	   automatically completed.
       To achive this in post build actions -> Build other projects  
 
       Continuous deployment is an extension of continuous delivery that automatically deploys each
       build that passes the full test cycle
 
15. Why we need Master-Slave architecture in Jenkins ?
       In an organization we are working with multiple builds and master cannot handle large number of builds.
	   To overcome this we use master-slave architecture.
	   In some cases, files may have different code and require multiple builds and the Jenkins server cannot 
	   handle multiple builds simultaneously for this, the Master distributes the workload and allows us to run 
	   different builds on different environments each called a Slave.
	 
16. What is Jenkinsfile ?
       A text file where the code is written to define the stages & steps of the pipeline

17. How can I backup my Jenkins ?
       With the help of plugins 
         1. Backup (Old)
         2. Periodic Backup (New)	   
 
18. How to change Jenkins Home Directory ?
 
19. What is the difference between Build Periodically & Poll SCM ?
 
20. If you forgot your jenkins password then what can you do ?
       In jenkins home directory we have config file open that and there we have security option make it as false. Now log in 
	   and your able to login without any user.   
	   Manage Jenkins -> Configure globale security -> Security Realm -> Jenkins own database -> People -> Click on user 
	   to which you have to change the password -> configure -> Password section -> change password
 
21. On windows how you can start the jenkins as a service ?
       Till now we are running the jenkins war file through cmd and accessing through web but if we close the cmd the jenkins sevice 
	   will stop to avoid this do following steps:
	   manage jenkins -> Install as a windows service (Click and say yes) -> Now stop the cmd and still we can access jenkins
		
22. Trigger jenkins job with last used parameter value ?
       Rebuilder jenkins plugin --By this when we run a job with parameters if we want to run it again with previously given 
       values it will show same values.(Will get an option as Rebuild) 
  
23. What is Jenkins Pipeline ?
       Jenkins Pipeline is a combination of plugins that supports integration and implementaion of continuous delivery pipelines using jenkins pipeline.

24. What is Jenkinsfile ?
       Jenkinsfile is a text file that contains the defination of a jenkins pipeline.

25. What is Selenium Tool ?
       Selenium is an open-source tool which automates web browsing testing. Mainly used for functional testing.

26. Why we need jar/war file ?

27. What is WebHook ?
        A webhook is a simple callback or http push API

28. What is SonarQube & Why it is used in Jenkins ?
       SonarQube is an open-source platform which is used for continuous inspection of code quality.
	  
29. What is Apache JMeter ?
       It is a testing tool used for analyzing and measuring the performance of diff software services & products. 
 
30. Why we need Jenkins X ?
 
31. How to configure docker machine as a slave in Jenkins ?
 
32. K8s configuration with jenkins ?
 
33. What is the diff between adduser and useradd ?
       With adduser command, the home folder for the user will be created as default.
       With useradd command, there is no home folder for the user
 
34. Diff between mvn clean package & mvn clean install ?
 
35. Understand the architecture of POM.xml file
 
36. Why we are using docker as a slave instead of a seperate ec2 instance ?
       As we know docker containers are light in weight and takes OS from parent server if no need then it gives back.
	   But if we used seperate instance then it can seat ideal if not in use & can permanently take the OS (RAM/ROM) from 
	   parent server.	 

37. What is a CI/CD Pipeline?
       CI/CD stands for Continuous Integration/Continuous Delivery and/or Deployment. A (CI/CD) pipeline is a series of processes 
	   used to accelerate the development and deployment of software applications. 





